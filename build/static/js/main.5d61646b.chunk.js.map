{"version":3,"sources":["Ninja.js","App.js","serviceWorker.js","index.js"],"names":["Ninja","ninjaList","this","props","ninja","map","react_default","a","createElement","className","key","id","name","age","planet","race","hair_color","Component","App","state","src_Ninja","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA4BkBA,mLAxBR,IAEAC,EADYC,KAAKC,MAAfC,MACgBC,IAAI,SAAAD,GAC1B,OACAE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,IAAKN,EAAMO,IAClCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,SAA6BL,EAAMQ,KAAnC,KACAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,QAA2BL,EAAMS,KACjCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,WAAiCL,EAAMU,QACvCR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,SAA6BL,EAAMW,MACnCT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,eAAyCL,EAAMY,YAC/CV,EAAAC,EAAAC,cAAA,cAID,OACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdR,UAnBcgB,aCgCNC,oNA9BbC,MAAQ,CACNf,MAAM,CACN,CAACQ,KAAM,OAAQC,IAAK,KAAMG,WAAY,QAAQF,OAAO,YAAYC,KAAK,UAAWJ,GAAG,GACpF,CAACC,KAAM,UAAWC,IAAK,KAAMG,WAAY,SAASF,OAAO,OAAOC,KAAK,OAASJ,GAAG,GACjF,CAACC,KAAM,OAAQC,IAAK,KAAMG,WAAY,QAAQF,OAAO,UAAUC,KAAK,QAASJ,GAAG,GAChF,CAACC,KAAM,OAAQC,IAAK,KAAMG,WAAW,MAAMF,OAAO,QAAQC,KAAK,YAAaJ,GAAI,6EAQlF,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAAA,KAAGC,UAAW,kBAAd,mBAKJH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACY,EAAD,CAAOhB,MAAOF,KAAKiB,MAAMf,gBAvBVa,cCQCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,CAAKhB,KAAO,aAAeiB,SAASC,eAAe,SD0H7D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5d61646b.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\n\r\nclass  Ninja extends Component {    \r\n  render(){\r\n    const { ninja } = this.props;\r\n    const ninjaList = ninja.map(ninja => {\r\n      return (\r\n      <div className=\"ninja\" key={ninja.id}>\r\n      <div className='name'> Name:{ninja.name} </div>\r\n      <div className='age'> Age:{ninja.age}</div>\r\n      <div className='planet'> Planet:{ninja.planet}</div>\r\n      <hr/>\r\n      <div className='race'> Race:{ninja.race}</div>\r\n      <hr/>\r\n      <div className='hair_color'> Hair Color:{ninja.hair_color}</div>\r\n      <hr/>\r\n      </div>\r\n      )\r\n    })\r\n     return (\r\n      <div className=\"ninja-list\">\r\n      {ninjaList}\r\n     \r\n      </div>\r\n     )\r\n  }\r\n}\r\n   export default Ninja ;","import React,{Component} from 'react';\nimport Ninja from './Ninja';\nimport './App.css';\n \nclass  App extends Component  {\n  state = {\n    ninja:[\n    {name: 'Shin', age: '18', hair_color: 'black',planet:'Earth 212',race:'Chinese', id:1},\n    {name: 'Kakashi', age: '28', hair_color: 'Yellow',planet:'Mars',race:'Arab',  id:2},\n    {name: 'Asta', age: '17', hair_color: 'white',planet:'Jupiter',race:'Asian', id:3},\n    {name: 'Yuno', age :'17' ,hair_color:'Red',planet:'Venus',race:'Caucasian', id: 4}\n  \n  ]\n \n}\n\n  render(){\n    \n  return (\n    <div className=\"App\">\n      \n        <p className ='name_component'>\n        Names Component \n    \n        </p>    \n        \n    <hr/>\n    <Ninja ninja={this.state.ninja}/>\n\n\n \n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet name = 'Alex';\nReactDOM.render(<App name = 'yourname' />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}